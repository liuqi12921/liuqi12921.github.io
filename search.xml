<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python3速学01]]></title>
    <url>%2F2018%2F07%2F30%2FPython3%E9%80%9F%E5%AD%A601%2F</url>
    <content type="text"><![CDATA[相关链接 百度脑图Python3 Markdown语法参考 速学语法打开Python交互式编程环境注释Python中的注释以#开头，需要注意字符串字面值中的#并没有注释功能 123# 这是一行注释name = "Hitomi" # 注释也可以放在变量定义的后面text = "# This is not a comment because it's inside quotes." 基本算数运算（Python作为计算器使用）12345678910111213141516171819&gt;&gt;&gt; 2 + 24&gt;&gt;&gt; 50 - 5*620&gt;&gt;&gt; (50 - 5*6) / 45.0&gt;&gt;&gt; 8 / 5 # 除法总是返回浮点类型1.6&gt;&gt;&gt; 17 // 3 # 返回结果的整数部分5&gt;&gt;&gt; 17 % 3 # 求余数2# 以上涉及了Python中的两种数据类型 int(整型) 和 float(浮点型)&gt;&gt;&gt; 5 ** 2 # 求平方25&gt;&gt;&gt; 2 ** 7 # 求7次方128 如何设置变量12345&gt;&gt;&gt; width = 20 # 设置了变量width 并设置初始值为20&gt;&gt;&gt; height = 5 * 9 # 设置了变量height 并设置初始值为 5 * 9# = 为赋值运算符，意义为将等号右边的值赋值给等号左边的变量&gt;&gt;&gt; width = width + 2 # 此语句表示将width中的值加2后再赋值给width，显然等号的含义不同于数学上的定义 使用字符串123456789101112# 字符串可以使用单引号，也可以使用双引号，python使用unicode编码，支持亚洲字符&gt;&gt;&gt; 'My name is Hitomi and I like python very much' # 使用单引号&gt;&gt;&gt; "勉強すればするほど難しくなる思います" # 使用双引号&gt;&gt;&gt; print("China") # 使用内置函数print打印字符串&gt;&gt;&gt; name = "Hitomi" # 将字符串付给变量&gt;&gt;&gt; name[0] # 取第位置0的字符，返回'H'# 位置与字符的对应关系 +---+---+---+---+---+---+ | H | i | t | o | m | i | +---+---+---+---+---+---+ 0 1 2 3 4 5 6-6 -5 -4 -3 -2 -1 Python中类定义12345678910111213class Person: age = 19 # class variable shared by all instances def __init__(self, inputName): # 类似于Java的构造函数 self.name = inputName # instance variable unique to each instance def show(self): print(self.name) @staticmethod # 静态方法的定义 def version(): print("1.0")]]></content>
      <categories>
        <category>learn</category>
        <category>python3</category>
      </categories>
      <tags>
        <tag>python3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP with MySQL Essential Training 01]]></title>
    <url>%2F2018%2F07%2F29%2FPHP-with-MySQL-Essential-Training-01%2F</url>
    <content type="text"><![CDATA[How to use the exercise files Copy Files alt + drag in Windows and opt + drag in Mac Use Terminal to import SQL to MySQL mysql -u root -p database_name &lt; /sql/file/path/globe_bank.sql Solve php errorWhen I use &lt;?php echo date(&#39;Y&#39;); ?&gt; in my index.php file I get this error: It is not safe to rely on the system’s timezone settings and I can fix it by modifying php.ini and set date.timezone = PRC Use curl to test http responsecurl --head http://localhost/globe_bank/public/staff/subjects/new.php?test=404 Modify the header information123456789function error_404() &#123; header($_SERVER["SERVER_PROTOCOL"] . " 404 Not Found"); exit();&#125;function error_500() &#123; header($_SERVER["SERVER_PROTOCOL"] . " 500 Internal Server Error"); exit();&#125;]]></content>
      <categories>
        <category>learn</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>lynda</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vim Usage]]></title>
    <url>%2F2018%2F07%2F28%2FVim-Usage%2F</url>
    <content type="text"><![CDATA[如何在vim的帮助文档里跳转？Ctrl + ]可以进入Tag，Ctrl + T可以回到之前的位置，类似于浏览器里的前进和后退 如何安装vim插件？使用pathogen.vim，安装NerdTree 如何使用vim的分屏功能？vim分屏功能总结 12345# 创建空白分屏 :new# 打开任意文件 :vsplit(:vsp) filename 或 :split(:sp) filename# 打开当前文件 ctrl + w s/v# 关闭一个分屏 :only 或 ctrl + w o# 切换分屏 ctrl + w w Getting Started with Vim: An Interactive Guide]]></content>
      <categories>
        <category>tools</category>
        <category>vim</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用SpringMVC进行图片上传]]></title>
    <url>%2F2018%2F07%2F27%2F%E4%BD%BF%E7%94%A8SpringMVC%E8%BF%9B%E8%A1%8C%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%2F</url>
    <content type="text"><![CDATA[12345678910111213141516171819 @RequestMapping("/save")public String save(Blogger blogger, MultipartFile imageFile, HttpServletResponse response, HttpServletRequest request) throws Exception &#123; if (!imageFile.isEmpty()) &#123; String filePath = request.getSession().getServletContext().getRealPath("/"); String imageName = DateUtil.getCurrentDateStr() + "." + imageFile.getOriginalFilename().split("\\.")[1]; imageFile.transferTo(new File(filePath + "static/userImages/" + imageName)); // 保存文件到相应目录 blogger.setImageName(imageName); &#125; int resultTotal = bloggerService.update(blogger); StringBuffer result = new StringBuffer(); if (resultTotal &gt; 0) &#123; result.append("&lt;script language='javascript'&gt;alert('修改成功!')&lt;/script&gt;"); &#125; else &#123; result.append("&lt;script language='javascript'&gt;alert('修改失败!')&lt;/script&gt;"); &#125; ResponseUtil.write(response, result); return null;&#125; 利用Spring MVC进行图片的上传使用的是MultipartFile这个类 对应的前端代码如下 1&lt;input type="file" id="imageFile" name="imageFile"/&gt;]]></content>
      <categories>
        <category>代码片段</category>
      </categories>
      <tags>
        <tag>spring mvc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Install Python3 on Windows 10]]></title>
    <url>%2F2018%2F07%2F25%2FInstall-Python3-on-Windows-10%2F</url>
    <content type="text"><![CDATA[Python3的安装与下载 官网下载Python3 我这里选择Windows64位版 下载完成后得到如下安装文件 双击进行安装 验证Python是否正确安装 按Windows + x在出现的选项中选择 Windows PowerShell 键入python -V查看python的版本信息 键入pip freeze查看python包管理器是否安装成功 修改Windows PowerShell解除脚本运行限制 按Windows + x在出现的选项中选择 Windows PowerShell(管理员) 输入Set-ExecutionPolicy Unrestricted并输入yes确认]]></content>
      <categories>
        <category>learn</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[对Java代理模式的理解]]></title>
    <url>%2F2017%2F10%2F02%2F%E5%AF%B9Java%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E7%9A%84%E7%90%86%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[静态代理和动态代理静态代理模式的构成 一个共同的接口或抽象类 真实的类 代理类 其中真实类和代理类都实现了一个共同的接口，代理类内部有一个对真实类对象的引用，用户使用代理类时，实际会调用真实对象的对应方法。 静态代理的局限 有一个真实类就要构造一个代理类，类的数量会急剧增加 在编写代码时若没有确定需要被代理的真实类，是不能编写代理类的。 动态代理用户需要使用Java提供的Proxy类动态创建一个代理类，并使用这个代理类实现相应功能。对于一个代理类来说，首先它需要知道它要代理的类是什么，Proxy类的newProxyInstance()方法中的参数好像并没有提供这样的信息，其实这个信息存在于它的第三个参数InvocationHandler里面。InvocationHandler负责实际的方法调用，在实现了InvocationHandler接口的类里一定有一个成员变量来存储真实类的实例，而对真实类方法的调用则是通过invoke方法里的method参数来实现的。形如这样的形式： InvocationHandler.java12345678910111213@Overridepublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable&#123; System.out.println("before calling: " + method); if (null != args) &#123; for (Object obj : args) &#123; System.out.println(obj); &#125; &#125; Object object = method.invoke(proxyObj, args); System.out.println("after calling: " + method); return object;&#125; 这里InvacationHandler就是真实类和代理类之间的桥梁，代理类的对象在动态生成时只声称自己实现了某一组接口，这组接口应和真实类所实现的接口一致，这是由代理的性质所决定的。真实类被封装在了handler里，handler的invoke方法利用Java的反射机制就可以调用真实类的方法。动态代理具有很强的灵活性。首先，我们不再特意为某一个类创建代理类，代理类是动态生成的，同时对于只有在运行时才能确定真实类的场合，可以在运行时由handler来动态获取真实类解决。]]></content>
      <categories>
        <category>编程语言</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[编舟记观后感]]></title>
    <url>%2F2017%2F01%2F29%2F%E7%BC%96%E8%88%9F%E8%AE%B0%E8%A7%82%E5%90%8E%E6%84%9F%2F</url>
    <content type="text"><![CDATA[很喜欢这种类型的电影。叙事采用白描的手法，看似平铺直叙，但场景的切换和节奏的把握都很好，清楚地传达了作品的主题。看这样的作品就像在品清茶，入口时淡淡的，似乎没有什么滋味，但随着剧情的进展就会发现作品的主题和传达的情感会越来越浓。这种缓慢而含蓄的通过整个作品来表达主题的手法在日本电影中是很常见的。前几年的奥斯卡最佳外语片「送り人」也让我有这样的感受。 这类电影需要静下心来细细品味。和注重视觉效果和离奇剧情的商业片不同，这种从普通人视角出发来探究人生意义和生活哲学的作品往往更能引起共鸣。因为从这类作品中，我们或多或少看到了我们自己。 电影的开头和结尾都使用了大海这个意象，这贴合了电影的主题，同时从那深邃的大海影像中我联想到了一个词，静水流深。看似平静的外表下却蕴藏着巨大的能量，看似寻常的事物背后却有着很多人的努力和心血。 大渡海是主人公所编纂的辞书名称，这个名称寓意着这本书就像词汇之海中的一叶扁舟，引领着读者探索语言世界的奥秘。主人公用了十五年的时间最终编成了这部辞书。这期间经历了前辈的退休，同事的调离，和喜欢的人结婚，成为辞书编纂的负责人等等，虽然周遭的人和事都在变化，但初心未变。 编纂辞书这类工作，在外人看来，枯燥乏味，做这类工作的人也被世俗认为是怪人，因为他们通常看起来木讷，不善交际，与周遭的世界格格不入。正如主人公所说，我不知道他们在想什么，他们也不懂我的想法，道出了自己的苦恼。但推动社会进步与发展的不正是这样的怪人和偏执狂吗？他们就是深邃大海里的暗流，默默地引导社会前进的方向。 这部电影所传达的就是一种匠人文化，在看似重复枯燥的工作中体味人生的真谛与价值。这世界变化太快，人的心就像断了线的风筝，不知该去向何方。如果我们放弃了手中的线，那么这样的人生肯定是空虚而没有存在感的。电影的最后，在老编辑的信中提到了自己由于编写大渡海而感到无比充实。人在临终时有这样的感悟也算是幸福的吧。工匠文化是一种信仰，一种精神上的追求。快乐的获得来自于技艺的不断精进，来自于常年累月的努力所获得的对世界的理解，这是一种不依赖于外界环境的快乐，不然很难想象有人会坚持让自己感到痛苦的工作。 李笑来老师在他的《和时间做朋友》里谈到兴趣是最好的老师这句话是有问题的，其实不是有兴趣才去做，而是因为做了，而且做得比大多数人好才会有兴趣。所以也许可以得出这样的结论，对于大多数的工作，我们只要付出耐心与努力都可以做到相当好的程度，只不过这个社会太浮躁，大部分人都无法坚持下去吧。 以上是我观影后的一点感想。]]></content>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
</search>
