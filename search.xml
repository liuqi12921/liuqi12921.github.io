<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[进销存管理系统开发记录(01)]]></title>
    <url>%2F2018%2F08%2F01%2F%E8%BF%9B%E9%94%80%E5%AD%98%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95-01%2F</url>
    <content type="text"><![CDATA[环境搭建项目运行环境 windows 10 64位 家庭版 Spring Tool Suite Version: 3.9.2.RELEASE Spring Boot 2.0.4.RELEASE 项目初始环境设置 初期选择了JPA MySQL Web三个Sprint Boot Starter 添加Shiro和Gson的Maven依赖 建立数据库db_jxc 修改配置文件格式为YAML并进行相应配置，详见application.yml 创建实体com.hitomi.entity.User、com.hitomi.entity.Role、com.hitomi.entity.Menu 创建关联实体com.hitomi.entity.UserRole和com.hitomi.entity.RoleMenu 创建自定义Realm，com.hitomi.realm.MyRealm和Shiro配置类com.hitomi.config.ShiroConfig 登录功能实现 创建src/main/webapp/static，放入css和js文件夹 创建src/main/webapp/login.html 编写UserController 1234567891011@Controller@RequestMapping("/user")public class UserController &#123; @ResponseBody @RequestMapping("/login") public Map&lt;String, Object login(String imageCode, @Valid User user, BindingResult bindingResult, HttpSession session) &#123; // 这里采用的开发模式是ajax请求方式，服务器端不返回ModelAndView或者String // 服务端直接返回JSON形式的数据供客户端使用 &#125;&#125;]]></content>
      <tags>
        <tag>java项目</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot(03)]]></title>
    <url>%2F2018%2F08%2F01%2FSpring-Boot-03%2F</url>
    <content type="text"><![CDATA[Spring Boot 的事务\表单验证\AOP 事务在需要添加事务的方法上添加@Transactional注解即可 注意这个注解的全限定名为javax.transaction.Transactional 123456789101112@Transactionalpublic void transfer(int fromUser, int toUser, float money) &#123; Account fromAccount = accountDao.getOne(fromUser); fromAccount.setBalance(fromAccount.getBalance() - money); Account toAccount = accountDao.getOne(toUser); toAccount.setBalance(toAccount.getBalance() + money); accountDao.save(fromAccount); int zero = 1/ 0; // 此处会有异常，事务会回滚 accountDao.save(toAccount);&#125; 表单验证设置验证条件 1234567@Column(length=50)@NotEmpty(message="姓名不能为空")private String name;@NotNull(message="年龄不能为空")@Min(value=18, message="年龄必须大于18岁")private Integer age; 使用@Valid注解对传入的数据进行验证 123456789@RequestMapping("/add")public String add(@Valid Student student, BindingResult bindingResult) &#123; if (bindingResult.hasErrors()) &#123; return bindingResult.getFieldError().getDefaultMessage(); &#125; else &#123; studentService.addStudent(student); return "添加成功"; &#125;&#125; AOP示例代码 1234567891011121314151617181920212223242526272829303132333435@Aspect@Componentpublic class RequestAspect &#123; private Logger logger = Logger.getLogger(RequestAspect.class); @Pointcut("execution(public * com.hitomi.controller.*.*(..))") public void log() &#123; &#125; @Before("log()") public void doBefore(JoinPoint joinPoint) &#123; logger.info("方法执行前"); ServletRequestAttributes sra = (ServletRequestAttributes)RequestContextHolder.getRequestAttributes(); HttpServletRequest request = sra.getRequest(); logger.info("url: " + request.getRequestURI()); logger.info("ip: " + request.getRemoteHost()); logger.info("method: " + request.getMethod()); logger.info("class_method: " + joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName()); logger.info("args: " + joinPoint.getArgs()); for (Object arg : joinPoint.getArgs()) &#123; System.out.println(arg); &#125; &#125; @After("log()") public void doAfter(JoinPoint joinPoint) &#123; logger.info("方法执行后"); &#125; @AfterReturning(pointcut="log()", returning="result") public void doAfterReturning(Object result) &#123; logger.info("方法返回值" + result); &#125;&#125;]]></content>
      <tags>
        <tag>spring</tag>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot(02)]]></title>
    <url>%2F2018%2F08%2F01%2FSpring-Boot-02%2F</url>
    <content type="text"><![CDATA[Spring JPA基本用法 准备工作添加Maven依赖 123456789&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&lt;/dependency&gt; 创建db_springboot数据库 创建实体类 12345678910111213141516171819202122232425package com.hitomi.entity;import javax.persistence.Column;import javax.persistence.Entity;import javax.persistence.GeneratedValue;import javax.persistence.Id;import javax.persistence.Table;@Entity@Table(name="t_book")public class Book &#123; @Id @GeneratedValue private Integer id; @Column(length=100) private String name; @Column(length=50) private String author; // Getter And Setter...&#125; 配置application.yml 123456789101112131415161718server: port: 8080 context-path: /spring: datasource: driver-class-name: com.mysql.jdbc.Driver url: jdbc:mysql://localhost:3306/db_springboot username: root password: root jpa: database: MYSQL show-sql: true hibernate: ddl-auto: update properties: hibernate: dialect: org.hibernate.dialect.MySQLDialect 创建BookDao.java 1234567package com.hitomi.dao;import org.springframework.data.jpa.repository.JpaRepository;import com.hitomi.entity.Book;public interface BookDao extends JpaRepository&lt;Book, Integer&gt; &#123;&#125; 这里只需要继承JpaRepository就可以实现基本的增删改查的操作，很方便。 Jpa底层还是使用的Hibernate的实现 调用代码12345678910111213141516@Resourceprivate BookDao bookDao;@RequestMapping("/list")public ModelAndView list() &#123; ModelAndView mav = new ModelAndView(); mav.addObject("bookList", bookDao.findAll()); mav.setViewName("bookList"); return mav;&#125;// 增删改查的接口// bookDao.findAll();// bookDao.save(book);// bookDao.getOne(id);// bookDao.delete(id); Freemarker的用法12345&lt;#list bookList as book&gt; $&#123;book.id&#125; $&#123;book.name&#125; $&#123;book.author&#125;&lt;/#list&gt; Spring JPA进阶用法使用@Query实现复杂查询123456789public interface BookDao extends JpaRepository&lt;Book, Integer&gt;&#123; // 使用HQL @Query("from Book b where b.name like %?1%") public List&lt;Book&gt; findByName(String name); // 使用原生SQL随机获得一条数据 @Query(value="select * from t_book order by RAND() limit ?1", nativeQuery=true) public List&lt;Book&gt; randomList(Integer n);&#125; 使用Specification实现多条件动态查询12// 首先需要继承JpaSpecificationExecutor接口public interface BookDao extends JpaRepository&lt;Book, Integer&gt;,JpaSpecificationExecutor&lt;Book&gt;&#123;&#125;; 使用套路 12345678910111213141516171819202122@PostMapping("/list2")public ModelAndView list2(Book book) &#123; ModelAndView mav = new ModelAndView(); List&lt;Book&gt; bookList = bookDao.findAll(new Specification&lt;Book&gt;() &#123; @Override public Predicate toPredicate(Root&lt;Book&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb) &#123; Predicate predicate = cb.conjunction(); if (book != null) &#123; if (book.getName() != null &amp;&amp; !"".equals(book.getName())) &#123; predicate.getExpressions().add(cb.like(root.get("name"), "%"+book.getName()+"%")); &#125; if (book.getAuthor() != null &amp;&amp; !"".equals(book.getAuthor())) &#123; predicate.getExpressions().add(cb.like(root.get("author"), "%"+book.getAuthor()+"%")); &#125; &#125; return predicate; &#125; &#125;); mav.addObject("bookList", bookList); mav.setViewName("bookList"); return mav;&#125; 前台表单 12345&lt;form method="post" action="/book/list2"&gt; 图书名称&lt;input name="name" /&gt;&lt;br /&gt; 图书作者&lt;input name="author" /&gt;&lt;br /&gt; &lt;input type="submit" value="查询" /&gt;&lt;br /&gt;&lt;/form&gt; Spring MVC使用ModelAndView进行重定向]]></content>
      <tags>
        <tag>spring</tag>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot(01)]]></title>
    <url>%2F2018%2F07%2F31%2FSpring-Boot-01%2F</url>
    <content type="text"><![CDATA[参考资源Spring Boot 使用的开发工具和平台 Windows 10 64位家庭版 Spring Tool Suite Version: 3.9.2.RELEASE java version 1.8.0_151 创建Spring Boot项目 选择Spring Boot项目 设置Spring Boot项目 设置项目依赖 运行Spring Boot：右击HelloWorldBootApplication.java，选择Spring Boot App 运行结果如果出现错误： Unregistering JMX-exposed beans on shutdown，原因在于Maven包下载不完全，这里直接更换Spring Boot版本予以解决。 项目配置使用application.properties对项目进行配置，如：1234567# 系统配置server.port=9000server.context-path=/# 自定义配置helloWorld=Hello Harry Potter# 自定义配置，带前缀mysql.jdbcName=com.mysql.jdbc.Driver 在项目中使用自定义配置的方法1234567// 不带前缀@Value("$&#123;helloWorld&#125;")private String helloWorld;// 带前缀@Value("$&#123;mysql.jdbcName&#125;")private String jdbcName; 测试类1234567891011121314151617package com.hitomi.controller;import org.springframework.beans.factory.annotation.Value;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@RestControllerpublic class HelloWorldController &#123; @Value("$&#123;helloWorld&#125;") private String helloWorld; @RequestMapping("/helloWorld") public String say() &#123; return helloWorld; &#125;&#125; 使用@ConfigurationProperties注解简化带前缀配置的使用123456&lt;!-- 需要在pom.xml添加依赖 --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt; 12345678910111213141516// 配置类，用于处理多个相同前缀的配置项@Component@ConfigurationProperties(prefix = "mysql")public class MysqlProperties &#123; private String jdbcName; public String getJdbcName() &#123; return jdbcName; &#125; public void setJdbcName(String jdbcName) &#123; this.jdbcName = jdbcName; &#125;&#125; 1234567// 使用方法// 注入配置类@Resourceprivate MysqlProperties mysqlProperties;// 使用配置类mysqlProperties.getJdbcName(); Spring Boot对MVC的支持对Spring MVC的基本支持 @RequestMapping @Controller @RestController @PatVariable 获取路径参数 @RequestParam 获取请求参数 使用freemarker1234567891011&lt;!-- 添加freemarker依赖 --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-freemarker&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!-- 添加使得SpringBoot支持热部署 --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt; 为STS安装Freemarker插件安装方法：Help--&gt;Install New Software--&gt;Add--&gt;Name=freemarker,Location=http://download.jboss.org/jbosstools/updates/development/，然后选择FreeMarker IDE即可。]]></content>
      <tags>
        <tag>spring</tag>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Vagrant管理虚拟机]]></title>
    <url>%2F2018%2F07%2F31%2F%E4%BD%BF%E7%94%A8Vagrant%E7%AE%A1%E7%90%86%E8%99%9A%E6%8B%9F%E6%9C%BA%2F</url>
    <content type="text"><![CDATA[软件版本和参考资源初次接触Vagrant，了解有限，但还是能感受到它带来的好处。最大的益处在于使得配置软件开发环境异常简单，再也不用担心把系统搞乱了。 这里主要参考Laravel框架Homestead的安装和设置，宿主机是Windows 10家庭版，虚拟机使用VirtualBox-5.2.16-123759-Win.exe，Vagrant使用vagrant_2.1.2_x86_64.msi。 安装 Homestead Vagrant Box使用vagrant box add laravel/homestead命令添加laravel/homestead到Vagrant。Vagrant Box默认的保存路径为C:\Users\userName\.vagrant.d\，可以通过设置环境变量更改此位置。在Windows下为setx VAGRANT_HOME &quot;E:\your\path&quot;。这里的Vagrant Box就是虚拟机映像文件。 安装Homestead通过git clone https://github.com/laravel/homestead.git ~/Homestead下载到指定目录，我本机的目录为E:\Homestead，完成后通过init.bat生成配置文件Homestead.yaml。 配置Homestead虚拟机配置文件夹同步123folders: - map: E:/web/homestead/code to: /home/vagrant/code 配置Nginx123456sites: - map: homestead.test to: /home/vagrant/code/laravel/public - map: liuqi.learn to: /home/vagrant/code/apache/public type: "apache" 这里配置了两个站点，一个为Laravel站点，默认使用Nginx，另一个为普通站点，使用Apache。 修改配置后可以使用vagrant reload --provision更新配置。 添加Host配置hosts文件位置C:\Windows\System32\drivers\etc\hosts，设置如下： 123# Laravel Homestead192.168.10.10 homestead.test192.168.10.10 me.learn 添加完成后即可通过http://homestead.test访问站点。 运行Vagrant Box在E:\Homestead目录下执行vagrant up即可启动虚拟机。销毁虚拟机的命令为vagrant destroy --force，此命令不会删除Vagrant Box。 Vagrant 常用命令1234567891011121314151617vagrant init # 初始化vagrant up # 启动虚拟机vagrant halt # 关闭虚拟机vagrant reload # 重启虚拟机vagrant ssh # SSH 至虚拟机vagrant suspend # 挂起虚拟机vagrant resume # 唤醒虚拟机vagrant status # 查看虚拟机运行状态vagrant destroy # 销毁当前虚拟机#box管理命令vagrant box list # 查看本地box列表vagrant box add # 添加box到列表vagrant box remove # 从box列表移除 杂项12345# 在Window命令行打开代理的方法set http_proxy=http://proxy.domain.com:port# 如果有用户名和密码的话set http_proxy_user=set http_proxy_pass= 在设置了hosts文件的情况下，如果浏览器使用了代理模式上网，则不能正常访问本地网站，关闭浏览器代理即可。]]></content>
      <tags>
        <tag>Laravel</tag>
        <tag>Vagrant</tag>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python3速学-01]]></title>
    <url>%2F2018%2F07%2F30%2FPython3%E9%80%9F%E5%AD%A6-01%2F</url>
    <content type="text"><![CDATA[相关链接 百度脑图Python3 Markdown语法参考 速学语法 打开Python交互式编程环境注释Python中的注释以#开头，需要注意字符串字面值中的#并没有注释功能 123# 这是一行注释name = "Hitomi" # 注释也可以放在变量定义的后面text = "# This is not a comment because it's inside quotes." 基本算数运算（Python作为计算器使用）12345678910111213141516171819&gt;&gt;&gt; 2 + 24&gt;&gt;&gt; 50 - 5*620&gt;&gt;&gt; (50 - 5*6) / 45.0&gt;&gt;&gt; 8 / 5 # 除法总是返回浮点类型1.6&gt;&gt;&gt; 17 // 3 # 返回结果的整数部分5&gt;&gt;&gt; 17 % 3 # 求余数2# 以上涉及了Python中的两种数据类型 int(整型) 和 float(浮点型)&gt;&gt;&gt; 5 ** 2 # 求平方25&gt;&gt;&gt; 2 ** 7 # 求7次方128 如何设置变量12345&gt;&gt;&gt; width = 20 # 设置了变量width 并设置初始值为20&gt;&gt;&gt; height = 5 * 9 # 设置了变量height 并设置初始值为 5 * 9# = 为赋值运算符，意义为将等号右边的值赋值给等号左边的变量&gt;&gt;&gt; width = width + 2 # 此语句表示将width中的值加2后再赋值给width，显然等号的含义不同于数学上的定义 使用字符串123456789101112# 字符串可以使用单引号，也可以使用双引号，python使用unicode编码，支持亚洲字符&gt;&gt;&gt; 'My name is Hitomi and I like python very much' # 使用单引号&gt;&gt;&gt; "勉強すればするほど難しくなる思います" # 使用双引号&gt;&gt;&gt; print("China") # 使用内置函数print打印字符串&gt;&gt;&gt; name = "Hitomi" # 将字符串付给变量&gt;&gt;&gt; name[0] # 取第位置0的字符，返回'H'# 位置与字符的对应关系 +---+---+---+---+---+---+ | H | i | t | o | m | i | +---+---+---+---+---+---+ 0 1 2 3 4 5 6-6 -5 -4 -3 -2 -1 Python中类定义12345678910111213class Person: age = 19 # class variable shared by all instances def __init__(self, inputName): # 类似于Java的构造函数 self.name = inputName # instance variable unique to each instance def show(self): print(self.name) @staticmethod # 静态方法的定义 def version(): print("1.0")]]></content>
      <categories>
        <category>learn</category>
        <category>python3</category>
      </categories>
      <tags>
        <tag>python3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP with MySQL Essential Training 01]]></title>
    <url>%2F2018%2F07%2F29%2FPHP-with-MySQL-Essential-Training-01%2F</url>
    <content type="text"><![CDATA[How to use the exercise files Copy Files alt + drag in Windows and opt + drag in Mac Use Terminal to import SQL to MySQL mysql -u root -p database_name &lt; /sql/file/path/globe_bank.sql Solve php errorWhen I use &lt;?php echo date(&#39;Y&#39;); ?&gt; in my index.php file I get this error: It is not safe to rely on the system’s timezone settings and I can fix it by modifying php.ini and set date.timezone = PRC Use curl to test http responsecurl --head http://localhost/globe_bank/public/staff/subjects/new.php?test=404 Modify the header information123456789function error_404() &#123; header($_SERVER["SERVER_PROTOCOL"] . " 404 Not Found"); exit();&#125;function error_500() &#123; header($_SERVER["SERVER_PROTOCOL"] . " 500 Internal Server Error"); exit();&#125;]]></content>
      <categories>
        <category>learn</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>lynda</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vim Usage]]></title>
    <url>%2F2018%2F07%2F28%2FVim-Usage%2F</url>
    <content type="text"><![CDATA[如何在vim的帮助文档里跳转？ Ctrl + ]可以进入Tag，Ctrl + T可以回到之前的位置，类似于浏览器里的前进和后退 如何安装vim插件？使用pathogen.vim，安装NerdTree 如何使用vim的分屏功能？vim分屏功能总结 12345# 创建空白分屏 :new# 打开任意文件 :vsplit(:vsp) filename 或 :split(:sp) filename# 打开当前文件 ctrl + w s/v# 关闭一个分屏 :only 或 ctrl + w o# 切换分屏 ctrl + w w Getting Started with Vim: An Interactive Guide]]></content>
      <categories>
        <category>tools</category>
        <category>vim</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用SpringMVC进行图片上传]]></title>
    <url>%2F2018%2F07%2F27%2F%E4%BD%BF%E7%94%A8SpringMVC%E8%BF%9B%E8%A1%8C%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%2F</url>
    <content type="text"><![CDATA[12345678910111213141516171819 @RequestMapping("/save")public String save(Blogger blogger, MultipartFile imageFile, HttpServletResponse response, HttpServletRequest request) throws Exception &#123; if (!imageFile.isEmpty()) &#123; String filePath = request.getSession().getServletContext().getRealPath("/"); String imageName = DateUtil.getCurrentDateStr() + "." + imageFile.getOriginalFilename().split("\\.")[1]; imageFile.transferTo(new File(filePath + "static/userImages/" + imageName)); // 保存文件到相应目录 blogger.setImageName(imageName); &#125; int resultTotal = bloggerService.update(blogger); StringBuffer result = new StringBuffer(); if (resultTotal &gt; 0) &#123; result.append("&lt;script language='javascript'&gt;alert('修改成功!')&lt;/script&gt;"); &#125; else &#123; result.append("&lt;script language='javascript'&gt;alert('修改失败!')&lt;/script&gt;"); &#125; ResponseUtil.write(response, result); return null;&#125; 利用Spring MVC进行图片的上传使用的是MultipartFile这个类 对应的前端代码如下 1&lt;input type="file" id="imageFile" name="imageFile"/&gt;]]></content>
      <categories>
        <category>代码片段</category>
      </categories>
      <tags>
        <tag>spring mvc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Install Python3 on Windows 10]]></title>
    <url>%2F2018%2F07%2F25%2FInstall-Python3-on-Windows-10%2F</url>
    <content type="text"><![CDATA[Python3的安装与下载 官网下载Python3 我这里选择Windows64位版 下载完成后得到如下安装文件 双击进行安装 验证Python是否正确安装 按Windows + x在出现的选项中选择 Windows PowerShell 键入python -V查看python的版本信息 键入pip freeze查看python包管理器是否安装成功 修改Windows PowerShell解除脚本运行限制 按Windows + x在出现的选项中选择 Windows PowerShell(管理员) 输入Set-ExecutionPolicy Unrestricted并输入yes确认]]></content>
      <categories>
        <category>learn</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[对Java代理模式的理解]]></title>
    <url>%2F2017%2F10%2F02%2F%E5%AF%B9Java%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E7%9A%84%E7%90%86%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[静态代理和动态代理 静态代理模式的构成 一个共同的接口或抽象类 真实的类 代理类 其中真实类和代理类都实现了一个共同的接口，代理类内部有一个对真实类对象的引用，用户使用代理类时，实际会调用真实对象的对应方法。 静态代理的局限 有一个真实类就要构造一个代理类，类的数量会急剧增加 在编写代码时若没有确定需要被代理的真实类，是不能编写代理类的。 动态代理用户需要使用Java提供的Proxy类动态创建一个代理类，并使用这个代理类实现相应功能。对于一个代理类来说，首先它需要知道它要代理的类是什么，Proxy类的newProxyInstance()方法中的参数好像并没有提供这样的信息，其实这个信息存在于它的第三个参数InvocationHandler里面。InvocationHandler负责实际的方法调用，在实现了InvocationHandler接口的类里一定有一个成员变量来存储真实类的实例，而对真实类方法的调用则是通过invoke方法里的method参数来实现的。形如这样的形式： InvocationHandler.java12345678910111213@Overridepublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable&#123; System.out.println("before calling: " + method); if (null != args) &#123; for (Object obj : args) &#123; System.out.println(obj); &#125; &#125; Object object = method.invoke(proxyObj, args); System.out.println("after calling: " + method); return object;&#125; 这里InvacationHandler就是真实类和代理类之间的桥梁，代理类的对象在动态生成时只声称自己实现了某一组接口，这组接口应和真实类所实现的接口一致，这是由代理的性质所决定的。真实类被封装在了handler里，handler的invoke方法利用Java的反射机制就可以调用真实类的方法。动态代理具有很强的灵活性。首先，我们不再特意为某一个类创建代理类，代理类是动态生成的，同时对于只有在运行时才能确定真实类的场合，可以在运行时由handler来动态获取真实类解决。]]></content>
      <categories>
        <category>编程语言</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[编舟记观后感]]></title>
    <url>%2F2017%2F01%2F29%2F%E7%BC%96%E8%88%9F%E8%AE%B0%E8%A7%82%E5%90%8E%E6%84%9F%2F</url>
    <content type="text"><![CDATA[很喜欢这种类型的电影。叙事采用白描的手法，看似平铺直叙，但场景的切换和节奏的把握都很好，清楚地传达了作品的主题。看这样的作品就像在品清茶，入口时淡淡的，似乎没有什么滋味，但随着剧情的进展就会发现作品的主题和传达的情感会越来越浓。这种缓慢而含蓄的通过整个作品来表达主题的手法在日本电影中是很常见的。前几年的奥斯卡最佳外语片「送り人」也让我有这样的感受。 这类电影需要静下心来细细品味。和注重视觉效果和离奇剧情的商业片不同，这种从普通人视角出发来探究人生意义和生活哲学的作品往往更能引起共鸣。因为从这类作品中，我们或多或少看到了我们自己。 电影的开头和结尾都使用了大海这个意象，这贴合了电影的主题，同时从那深邃的大海影像中我联想到了一个词，静水流深。看似平静的外表下却蕴藏着巨大的能量，看似寻常的事物背后却有着很多人的努力和心血。 大渡海是主人公所编纂的辞书名称，这个名称寓意着这本书就像词汇之海中的一叶扁舟，引领着读者探索语言世界的奥秘。主人公用了十五年的时间最终编成了这部辞书。这期间经历了前辈的退休，同事的调离，和喜欢的人结婚，成为辞书编纂的负责人等等，虽然周遭的人和事都在变化，但初心未变。 编纂辞书这类工作，在外人看来，枯燥乏味，做这类工作的人也被世俗认为是怪人，因为他们通常看起来木讷，不善交际，与周遭的世界格格不入。正如主人公所说，我不知道他们在想什么，他们也不懂我的想法，道出了自己的苦恼。但推动社会进步与发展的不正是这样的怪人和偏执狂吗？他们就是深邃大海里的暗流，默默地引导社会前进的方向。 这部电影所传达的就是一种匠人文化，在看似重复枯燥的工作中体味人生的真谛与价值。这世界变化太快，人的心就像断了线的风筝，不知该去向何方。如果我们放弃了手中的线，那么这样的人生肯定是空虚而没有存在感的。电影的最后，在老编辑的信中提到了自己由于编写大渡海而感到无比充实。人在临终时有这样的感悟也算是幸福的吧。工匠文化是一种信仰，一种精神上的追求。快乐的获得来自于技艺的不断精进，来自于常年累月的努力所获得的对世界的理解，这是一种不依赖于外界环境的快乐，不然很难想象有人会坚持让自己感到痛苦的工作。 李笑来老师在他的《和时间做朋友》里谈到兴趣是最好的老师这句话是有问题的，其实不是有兴趣才去做，而是因为做了，而且做得比大多数人好才会有兴趣。所以也许可以得出这样的结论，对于大多数的工作，我们只要付出耐心与努力都可以做到相当好的程度，只不过这个社会太浮躁，大部分人都无法坚持下去吧。 以上是我观影后的一点感想。]]></content>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
</search>
