<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hitomi</title>
  
  <subtitle>hitomi&#39;s tech blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liuqi12921.github.io/"/>
  <updated>2018-07-25T03:37:53.510Z</updated>
  <id>https://liuqi12921.github.io/</id>
  
  <author>
    <name>Hitomi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Install Python3 on Windows 10</title>
    <link href="https://liuqi12921.github.io/2018/07/25/Install-Python3-on-Windows-10/"/>
    <id>https://liuqi12921.github.io/2018/07/25/Install-Python3-on-Windows-10/</id>
    <published>2018-07-25T01:45:33.000Z</published>
    <updated>2018-07-25T03:37:53.510Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/07/25/Install-Python3-on-Windows-10/python_banner.png" alt=""></p><a id="more"></a><h3 id="Python3的安装与下载"><a href="#Python3的安装与下载" class="headerlink" title="Python3的安装与下载"></a>Python3的安装与下载</h3><ol><li><p><a href="https://www.python.org/downloads/release/python-362/" target="_blank" rel="noopener">官网下载Python3</a></p></li><li><p>我这里选择Windows64位版  <img src="/2018/07/25/Install-Python3-on-Windows-10/download_python.png" alt=""></p></li><li><p>下载完成后得到如下安装文件 <img src="/2018/07/25/Install-Python3-on-Windows-10/python362.png" alt=""></p></li><li><p>双击进行安装</p><blockquote><ul><li><img src="/2018/07/25/Install-Python3-on-Windows-10/python_install_1.png" alt=""></li><li><img src="/2018/07/25/Install-Python3-on-Windows-10/python_install_2.png" alt=""></li><li><img src="/2018/07/25/Install-Python3-on-Windows-10/python_install_3.png" alt=""></li><li><img src="/2018/07/25/Install-Python3-on-Windows-10/python_install_4.png" alt=""></li><li><img src="/2018/07/25/Install-Python3-on-Windows-10/python_install_5.png" alt=""></li></ul></blockquote></li><li><p>验证<code>Python</code>是否正确安装</p><blockquote><ul><li>按<code>Windows + x</code>在出现的选项中选择 <code>Windows PowerShell</code></li><li>键入<code>python -V</code>查看<code>python</code>的版本信息 <img src="/2018/07/25/Install-Python3-on-Windows-10/check_python_version.png" alt=""></li><li>键入<code>pip freeze</code>查看<code>python</code>包管理器是否安装成功 <img src="/2018/07/25/Install-Python3-on-Windows-10/check_pip.png" alt=""></li></ul></blockquote></li><li><p>修改<code>Windows PowerShell</code>解除脚本运行限制</p><blockquote><ul><li>按<code>Windows + x</code>在出现的选项中选择 <code>Windows PowerShell(管理员)</code></li><li>输入<code>Set-ExecutionPolicy Unrestricted</code>并输入<code>yes</code>确认</li></ul></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/07/25/Install-Python3-on-Windows-10/python_banner.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="learn" scheme="https://liuqi12921.github.io/categories/learn/"/>
    
      <category term="python" scheme="https://liuqi12921.github.io/categories/learn/python/"/>
    
    
      <category term="python" scheme="https://liuqi12921.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>对Java代理模式的理解</title>
    <link href="https://liuqi12921.github.io/2017/10/02/%E5%AF%B9Java%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>https://liuqi12921.github.io/2017/10/02/对Java代理模式的理解/</id>
    <published>2017-10-02T12:36:47.000Z</published>
    <updated>2018-07-25T03:36:50.806Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2017/10/02/对Java代理模式的理解/java_banner.gif" alt=""></p><a id="more"></a><h2 id="静态代理和动态代理"><a href="#静态代理和动态代理" class="headerlink" title="静态代理和动态代理"></a>静态代理和动态代理</h2><h3 id="静态代理模式的构成"><a href="#静态代理模式的构成" class="headerlink" title="静态代理模式的构成"></a>静态代理模式的构成</h3><blockquote><ul><li>一个共同的接口或抽象类</li><li>真实的类</li><li>代理类</li></ul></blockquote><p>其中<strong>真实类</strong>和<strong>代理类</strong>都实现了一个<strong>共同的接口</strong>，代理类内部有一个对真实类对象的引用，用户使用代理类时，实际会调用真实对象的对应方法。</p><h3 id="静态代理的局限"><a href="#静态代理的局限" class="headerlink" title="静态代理的局限"></a>静态代理的局限</h3><blockquote><ul><li>有一个真实类就要构造一个代理类，类的数量会急剧增加</li><li>在编写代码时若没有确定需要被代理的真实类，是不能编写代理类的。</li></ul></blockquote><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>用户需要使用<code>Java</code>提供的<code>Proxy</code>类动态创建一个代理类，并使用这个代理类实现相应功能。对于一个代理类来说，首先它需要知道它要代理的类是什么，<code>Proxy</code>类的<code>newProxyInstance()</code>方法中的参数好像并没有提供这样的信息，其实这个信息存在于它的第三个参数<code>InvocationHandler</code>里面。<code>InvocationHandler</code>负责实际的方法调用，在实现了<code>InvocationHandler</code>接口的类里一定有一个成员变量来存储真实类的实例，而对真实类方法的调用则是通过<code>invoke</code>方法里的<code>method</code>参数来实现的。形如这样的形式：</p><figure class="highlight java"><figcaption><span>InvocationHandler.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  System.out.println(<span class="string">"before calling: "</span> + method);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">null</span> != args) &#123;</span><br><span class="line">    <span class="keyword">for</span> (Object obj : args) &#123;</span><br><span class="line">      System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  Object object = method.invoke(proxyObj, args);</span><br><span class="line">  System.out.println(<span class="string">"after calling: "</span> + method);</span><br><span class="line">  <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>InvacationHandler</code>就是真实类和代理类之间的桥梁，代理类的对象在动态生成时只声称自己实现了某一组接口，这组接口应和真实类所实现的接口一致，这是由代理的性质所决定的。真实类被封装在了<code>handler</code>里，<code>handler</code>的<code>invoke</code>方法利用<code>Java</code>的反射机制就可以调用真实类的方法。动态代理具有很强的灵活性。首先，我们不再特意为某一个类创建代理类，代理类是动态生成的，同时对于只有在运行时才能确定真实类的场合，可以在运行时由<code>handler</code>来动态获取真实类解决。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2017/10/02/对Java代理模式的理解/java_banner.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程语言" scheme="https://liuqi12921.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Java" scheme="https://liuqi12921.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/"/>
    
    
      <category term="设计模式" scheme="https://liuqi12921.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>编舟记观后感</title>
    <link href="https://liuqi12921.github.io/2017/01/29/%E7%BC%96%E8%88%9F%E8%AE%B0%E8%A7%82%E5%90%8E%E6%84%9F/"/>
    <id>https://liuqi12921.github.io/2017/01/29/编舟记观后感/</id>
    <published>2017-01-29T05:57:21.000Z</published>
    <updated>2018-07-24T13:58:44.936Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2017/01/29/编舟记观后感/bianzhouji.jpg" alt=""></p><a id="more"></a><p>很喜欢这种类型的电影。叙事采用白描的手法，看似平铺直叙，但场景的切换和节奏的把握都很好，清楚地传达了作品的主题。看这样的作品就像在品清茶，入口时淡淡的，似乎没有什么滋味，但随着剧情的进展就会发现作品的主题和传达的情感会越来越浓。这种缓慢而含蓄的通过整个作品来表达主题的手法在日本电影中是很常见的。前几年的奥斯卡最佳外语片<strong>「送り人」</strong>也让我有这样的感受。</p><p>这类电影需要静下心来细细品味。和注重视觉效果和离奇剧情的商业片不同，这种从普通人视角出发来探究人生意义和生活哲学的作品往往更能引起共鸣。因为从这类作品中，我们或多或少看到了我们自己。</p><p>电影的开头和结尾都使用了大海这个意象，这贴合了电影的主题，同时从那深邃的大海影像中我联想到了一个词，<strong>静水流深</strong>。看似平静的外表下却蕴藏着巨大的能量，看似寻常的事物背后却有着很多人的努力和心血。</p><p><strong>大渡海</strong>是主人公所编纂的辞书名称，这个名称寓意着这本书就像词汇之海中的一叶扁舟，引领着读者探索语言世界的奥秘。主人公用了十五年的时间最终编成了这部辞书。这期间经历了前辈的退休，同事的调离，和喜欢的人结婚，成为辞书编纂的负责人等等，虽然周遭的人和事都在变化，但初心未变。</p><p>编纂辞书这类工作，在外人看来，枯燥乏味，做这类工作的人也被世俗认为是怪人，因为他们通常看起来木讷，不善交际，与周遭的世界格格不入。正如主人公所说，我不知道他们在想什么，他们也不懂我的想法，道出了自己的苦恼。但<strong>推动社会进步与发展的不正是这样的怪人和偏执狂吗？</strong>他们就是深邃大海里的暗流，默默地引导社会前进的方向。</p><p>这部电影所传达的就是一种匠人文化，在看似重复枯燥的工作中体味人生的真谛与价值。这世界变化太快，人的心就像断了线的风筝，不知该去向何方。如果我们放弃了手中的线，那么这样的人生肯定是空虚而没有存在感的。电影的最后，在老编辑的信中提到了自己由于编写<strong>大渡海</strong>而感到无比充实。人在临终时有这样的感悟也算是幸福的吧。工匠文化是一种信仰，一种精神上的追求。快乐的获得来自于技艺的不断精进，来自于常年累月的努力所获得的对世界的理解，这是一种不依赖于外界环境的快乐，不然很难想象有人会坚持让自己感到痛苦的工作。</p><p>李笑来老师在他的《和时间做朋友》里谈到<strong>兴趣是最好的老师</strong>这句话是有问题的，<strong>其实不是有兴趣才去做，而是因为做了，而且做得比大多数人好才会有兴趣</strong>。所以也许可以得出这样的结论，对于大多数的工作，我们只要付出耐心与努力都可以做到相当好的程度，只不过这个社会太浮躁，大部分人都无法坚持下去吧。</p><p>以上是我观影后的一点感想。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2017/01/29/编舟记观后感/bianzhouji.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://liuqi12921.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
