<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hitomi</title>
  
  <subtitle>hitomi&#39;s tech blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liuqi12921.github.io/"/>
  <updated>2018-08-02T08:23:00.758Z</updated>
  <id>https://liuqi12921.github.io/</id>
  
  <author>
    <name>Hitomi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>进销存管理系统开发记录(01)</title>
    <link href="https://liuqi12921.github.io/2018/08/01/%E8%BF%9B%E9%94%80%E5%AD%98%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95-01/"/>
    <id>https://liuqi12921.github.io/2018/08/01/进销存管理系统开发记录-01/</id>
    <published>2018-08-01T12:23:48.000Z</published>
    <updated>2018-08-02T08:23:00.758Z</updated>
    
    <content type="html"><![CDATA[<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>项目运行环境</p><blockquote><ul><li>windows 10 64位 家庭版</li><li>Spring Tool Suite Version: 3.9.2.RELEASE</li><li>Spring Boot 2.0.4.RELEASE</li></ul></blockquote><a id="more"></a><p>项目初始环境设置</p><blockquote><ul><li>初期选择了<code>JPA</code> <code>MySQL</code> <code>Web</code>三个Sprint Boot Starter</li><li>添加<code>Shiro</code>和<code>Gson</code>的<code>Maven</code>依赖</li><li>建立数据库<code>db_jxc</code></li><li>修改配置文件格式为<code>YAML</code>并进行相应配置，详见<code>application.yml</code></li><li>创建实体<code>com.hitomi.entity.User</code>、<code>com.hitomi.entity.Role</code>、<code>com.hitomi.entity.Menu</code></li><li>创建关联实体<code>com.hitomi.entity.UserRole</code>和<code>com.hitomi.entity.RoleMenu</code></li><li>创建自定义<code>Realm</code>，<code>com.hitomi.realm.MyRealm</code>和<code>Shiro</code>配置类<code>com.hitomi.config.ShiroConfig</code></li></ul></blockquote><h3 id="登录功能实现"><a href="#登录功能实现" class="headerlink" title="登录功能实现"></a>登录功能实现</h3><blockquote><ul><li><p>创建<code>src/main/webapp/static</code>，放入<code>css</code>和<code>js</code>文件夹</p></li><li><p>创建<code>src/main/webapp/login.html</code></p></li><li><p>编写<code>UserController</code></p></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, <span class="function">Object <span class="title">login</span><span class="params">(String imageCode, @Valid User user,</span></span></span><br><span class="line"><span class="function"><span class="params">        BindingResult bindingResult, HttpSession session)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里采用的开发模式是ajax请求方式，服务器端不返回ModelAndView或者String</span></span><br><span class="line">        <span class="comment">// 服务端直接返回JSON形式的数据供客户端使用</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h3&gt;&lt;p&gt;项目运行环境&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;windows 10 64位 家庭版&lt;/li&gt;
&lt;li&gt;Spring Tool Suite Version: 3.9.2.RELEASE&lt;/li&gt;
&lt;li&gt;Spring Boot 2.0.4.RELEASE&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="java项目" scheme="https://liuqi12921.github.io/tags/java%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot(03)</title>
    <link href="https://liuqi12921.github.io/2018/08/01/Spring-Boot-03/"/>
    <id>https://liuqi12921.github.io/2018/08/01/Spring-Boot-03/</id>
    <published>2018-08-01T07:41:20.000Z</published>
    <updated>2018-08-02T08:20:50.394Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-Boot-的事务-表单验证-AOP"><a href="#Spring-Boot-的事务-表单验证-AOP" class="headerlink" title="Spring Boot 的事务\表单验证\AOP"></a>Spring Boot 的事务\表单验证\AOP</h3><a id="more"></a><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><p>在需要添加事务的方法上添加<code>@Transactional</code>注解即可</p><p>注意这个注解的全限定名为<code>javax.transaction.Transactional</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(<span class="keyword">int</span> fromUser, <span class="keyword">int</span> toUser, <span class="keyword">float</span> money)</span> </span>&#123;</span><br><span class="line">    Account fromAccount = accountDao.getOne(fromUser);</span><br><span class="line">    fromAccount.setBalance(fromAccount.getBalance() - money);</span><br><span class="line"></span><br><span class="line">    Account toAccount = accountDao.getOne(toUser);</span><br><span class="line">    toAccount.setBalance(toAccount.getBalance() + money);</span><br><span class="line"></span><br><span class="line">    accountDao.save(fromAccount);</span><br><span class="line">    <span class="keyword">int</span> zero = <span class="number">1</span>/ <span class="number">0</span>; <span class="comment">// 此处会有异常，事务会回滚</span></span><br><span class="line">    accountDao.save(toAccount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h4><p>设置验证条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Column</span>(length=<span class="number">50</span>)</span><br><span class="line"><span class="meta">@NotEmpty</span>(message=<span class="string">"姓名不能为空"</span>)</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NotNull</span>(message=<span class="string">"年龄不能为空"</span>)</span><br><span class="line"><span class="meta">@Min</span>(value=<span class="number">18</span>, message=<span class="string">"年龄必须大于18岁"</span>)</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br></pre></td></tr></table></figure><p>使用<code>@Valid</code>注解对传入的数据进行验证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/add"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(@Valid Student student, BindingResult bindingResult)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bindingResult.hasErrors()) &#123;</span><br><span class="line">        <span class="keyword">return</span> bindingResult.getFieldError().getDefaultMessage();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        studentService.addStudent(student);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"添加成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h4><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = Logger.getLogger(RequestAspect.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(public * com.hitomi.controller.*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"log()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doBefore</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">       logger.info(<span class="string">"方法执行前"</span>);</span><br><span class="line">       ServletRequestAttributes sra = (ServletRequestAttributes)RequestContextHolder.getRequestAttributes();</span><br><span class="line">       HttpServletRequest request = sra.getRequest();</span><br><span class="line">       logger.info(<span class="string">"url: "</span> + request.getRequestURI());</span><br><span class="line">       logger.info(<span class="string">"ip: "</span> + request.getRemoteHost());</span><br><span class="line">       logger.info(<span class="string">"method: "</span> + request.getMethod());</span><br><span class="line">       logger.info(<span class="string">"class_method: "</span> + joinPoint.getSignature().getDeclaringTypeName() + <span class="string">"."</span> + joinPoint.getSignature().getName());</span><br><span class="line">       logger.info(<span class="string">"args: "</span> + joinPoint.getArgs());</span><br><span class="line">       <span class="keyword">for</span> (Object arg : joinPoint.getArgs()) &#123;</span><br><span class="line">         System.out.println(arg);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"log()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfter</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">       logger.info(<span class="string">"方法执行后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning</span>(pointcut=<span class="string">"log()"</span>, returning=<span class="string">"result"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterReturning</span><span class="params">(Object result)</span> </span>&#123;</span><br><span class="line">       logger.info(<span class="string">"方法返回值"</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-Boot-的事务-表单验证-AOP&quot;&gt;&lt;a href=&quot;#Spring-Boot-的事务-表单验证-AOP&quot; class=&quot;headerlink&quot; title=&quot;Spring Boot 的事务\表单验证\AOP&quot;&gt;&lt;/a&gt;Spring Boot 的事务\表单验证\AOP&lt;/h3&gt;
    
    </summary>
    
    
      <category term="spring" scheme="https://liuqi12921.github.io/tags/spring/"/>
    
      <category term="spring boot" scheme="https://liuqi12921.github.io/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot(02)</title>
    <link href="https://liuqi12921.github.io/2018/08/01/Spring-Boot-02/"/>
    <id>https://liuqi12921.github.io/2018/08/01/Spring-Boot-02/</id>
    <published>2018-08-01T02:42:30.000Z</published>
    <updated>2018-08-02T08:20:36.816Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-JPA基本用法"><a href="#Spring-JPA基本用法" class="headerlink" title="Spring JPA基本用法"></a>Spring JPA基本用法</h3><a id="more"></a><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>添加<code>Maven</code>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建<code>db_springboot</code>数据库</p><p>创建实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hitomi.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Column;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Table;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"t_book"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(length=<span class="number">100</span>)</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column</span>(length=<span class="number">50</span>)</span><br><span class="line"><span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Getter And Setter...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置<code>application.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">  context-path:</span> <span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/db_springboot</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  jpa:</span></span><br><span class="line"><span class="attr">    database:</span> <span class="string">MYSQL</span></span><br><span class="line"><span class="attr">    show-sql:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    hibernate:</span></span><br><span class="line"><span class="attr">      ddl-auto:</span> <span class="string">update</span></span><br><span class="line"><span class="attr">    properties:</span></span><br><span class="line"><span class="attr">      hibernate:</span></span><br><span class="line"><span class="attr">        dialect:</span> <span class="string">org.hibernate.dialect.MySQLDialect</span></span><br></pre></td></tr></table></figure><p>创建<code>BookDao.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hitomi.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hitomi.entity.Book;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Book</span>, <span class="title">Integer</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>这里只需要继承<code>JpaRepository</code>就可以实现基本的增删改查的操作，很方便。</p><p><code>Jpa</code>底层还是使用的<code>Hibernate</code>的实现</p><h4 id="调用代码"><a href="#调用代码" class="headerlink" title="调用代码"></a>调用代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/list"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    mav.addObject(<span class="string">"bookList"</span>, bookDao.findAll());</span><br><span class="line">    mav.setViewName(<span class="string">"bookList"</span>);</span><br><span class="line">    <span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增删改查的接口</span></span><br><span class="line"><span class="comment">// bookDao.findAll();</span></span><br><span class="line"><span class="comment">// bookDao.save(book);</span></span><br><span class="line"><span class="comment">// bookDao.getOne(id);</span></span><br><span class="line"><span class="comment">// bookDao.delete(id);</span></span><br></pre></td></tr></table></figure><h4 id="Freemarker的用法"><a href="#Freemarker的用法" class="headerlink" title="Freemarker的用法"></a>Freemarker的用法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">bookList</span> <span class="attr">as</span> <span class="attr">book</span>&gt;</span></span><br><span class="line">    $&#123;book.id&#125;</span><br><span class="line">    $&#123;book.name&#125;</span><br><span class="line">    $&#123;book.author&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">#list</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Spring-JPA进阶用法"><a href="#Spring-JPA进阶用法" class="headerlink" title="Spring JPA进阶用法"></a>Spring JPA进阶用法</h3><h4 id="使用-Query实现复杂查询"><a href="#使用-Query实现复杂查询" class="headerlink" title="使用@Query实现复杂查询"></a>使用<code>@Query</code>实现复杂查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Book</span>, <span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line"><span class="comment">// 使用HQL</span></span><br><span class="line"><span class="meta">@Query</span>(<span class="string">"from Book b where b.name like %?1%"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用原生SQL随机获得一条数据</span></span><br><span class="line"><span class="meta">@Query</span>(value=<span class="string">"select * from t_book order by RAND() limit ?1"</span>, nativeQuery=<span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">randomList</span><span class="params">(Integer n)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用Specification实现多条件动态查询"><a href="#使用Specification实现多条件动态查询" class="headerlink" title="使用Specification实现多条件动态查询"></a>使用<code>Specification</code>实现多条件动态查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先需要继承JpaSpecificationExecutor接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Book</span>, <span class="title">Integer</span>&gt;,<span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Book</span>&gt;</span>&#123;&#125;;</span><br></pre></td></tr></table></figure><p>使用套路</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/list2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">list2</span><span class="params">(Book book)</span> </span>&#123;</span><br><span class="line">    ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    List&lt;Book&gt; bookList = bookDao.findAll(<span class="keyword">new</span> Specification&lt;Book&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;Book&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb)</span> </span>&#123;</span><br><span class="line">            Predicate predicate = cb.conjunction();</span><br><span class="line">            <span class="keyword">if</span> (book != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (book.getName() != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(book.getName())) &#123;</span><br><span class="line">                    predicate.getExpressions().add(cb.like(root.get(<span class="string">"name"</span>), <span class="string">"%"</span>+book.getName()+<span class="string">"%"</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (book.getAuthor() != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(book.getAuthor())) &#123;</span><br><span class="line">                    predicate.getExpressions().add(cb.like(root.get(<span class="string">"author"</span>), <span class="string">"%"</span>+book.getAuthor()+<span class="string">"%"</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> predicate;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    mav.addObject(<span class="string">"bookList"</span>, bookList);</span><br><span class="line">    mav.setViewName(<span class="string">"bookList"</span>);</span><br><span class="line">    <span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前台表单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"/book/list2"</span>&gt;</span></span><br><span class="line">图书名称<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"name"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">图书作者<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"author"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"查询"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/paincupid/article/details/52263817" target="_blank" rel="noopener">Spring MVC使用ModelAndView进行重定向</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Spring-JPA基本用法&quot;&gt;&lt;a href=&quot;#Spring-JPA基本用法&quot; class=&quot;headerlink&quot; title=&quot;Spring JPA基本用法&quot;&gt;&lt;/a&gt;Spring JPA基本用法&lt;/h3&gt;
    
    </summary>
    
    
      <category term="spring" scheme="https://liuqi12921.github.io/tags/spring/"/>
    
      <category term="spring boot" scheme="https://liuqi12921.github.io/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot(01)</title>
    <link href="https://liuqi12921.github.io/2018/07/31/Spring-Boot-01/"/>
    <id>https://liuqi12921.github.io/2018/07/31/Spring-Boot-01/</id>
    <published>2018-07-31T14:13:03.000Z</published>
    <updated>2018-08-02T08:20:28.573Z</updated>
    
    <content type="html"><![CDATA[<h3 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h3><p><a href="https://spring.io/projects/spring-boot" target="_blank" rel="noopener">Spring Boot</a></p><h3 id="使用的开发工具和平台"><a href="#使用的开发工具和平台" class="headerlink" title="使用的开发工具和平台"></a>使用的开发工具和平台</h3><blockquote><ul><li>Windows 10 64位家庭版</li><li>Spring Tool Suite  Version: 3.9.2.RELEASE</li><li>java version 1.8.0_151</li></ul></blockquote><a id="more"></a><h3 id="创建Spring-Boot项目"><a href="#创建Spring-Boot项目" class="headerlink" title="创建Spring Boot项目"></a>创建Spring Boot项目</h3><blockquote><ul><li><p>选择Spring Boot项目 <img src="/2018/07/31/Spring-Boot-01/create_project_01.png" alt=""></p></li><li><p>设置Spring Boot项目 <img src="/2018/07/31/Spring-Boot-01/create_project_02.png" alt=""></p></li><li><p>设置项目依赖             <img src="/2018/07/31/Spring-Boot-01/create_project_03.png" alt=""></p></li><li><p>运行Spring Boot：右击<code>HelloWorldBootApplication.java</code>，选择<code>Spring Boot App</code></p></li><li><p>运行结果如果出现错误： <code>Unregistering JMX-exposed beans on shutdown</code>，原因在于Maven包下载不完全，这里直接更换Spring Boot版本予以解决。</p></li></ul></blockquote><h3 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h3><h4 id="使用application-properties对项目进行配置，如："><a href="#使用application-properties对项目进行配置，如：" class="headerlink" title="使用application.properties对项目进行配置，如："></a>使用<code>application.properties</code>对项目进行配置，如：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 系统配置</span><br><span class="line">server.port=9000</span><br><span class="line">server.context-path=/</span><br><span class="line"># 自定义配置</span><br><span class="line">helloWorld=Hello Harry Potter</span><br><span class="line"># 自定义配置，带前缀</span><br><span class="line">mysql.jdbcName=com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure><h4 id="在项目中使用自定义配置的方法"><a href="#在项目中使用自定义配置的方法" class="headerlink" title="在项目中使用自定义配置的方法"></a>在项目中使用自定义配置的方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不带前缀</span></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;helloWorld&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String helloWorld;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带前缀</span></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;mysql.jdbcName&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String jdbcName;</span><br></pre></td></tr></table></figure><h4 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hitomi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;helloWorld&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String helloWorld;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/helloWorld"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> helloWorld;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用-ConfigurationProperties注解简化带前缀配置的使用"><a href="#使用-ConfigurationProperties注解简化带前缀配置的使用" class="headerlink" title="使用@ConfigurationProperties注解简化带前缀配置的使用"></a>使用<code>@ConfigurationProperties</code>注解简化带前缀配置的使用</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 需要在pom.xml添加依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置类，用于处理多个相同前缀的配置项</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"mysql"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MysqlProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String jdbcName;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getJdbcName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> jdbcName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJdbcName</span><span class="params">(String jdbcName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.jdbcName = jdbcName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用方法</span></span><br><span class="line"><span class="comment">// 注入配置类</span></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> MysqlProperties mysqlProperties;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用配置类</span></span><br><span class="line">mysqlProperties.getJdbcName();</span><br></pre></td></tr></table></figure><h3 id="Spring-Boot对MVC的支持"><a href="#Spring-Boot对MVC的支持" class="headerlink" title="Spring Boot对MVC的支持"></a>Spring Boot对MVC的支持</h3><h4 id="对Spring-MVC的基本支持"><a href="#对Spring-MVC的基本支持" class="headerlink" title="对Spring MVC的基本支持"></a>对Spring MVC的基本支持</h4><blockquote><ul><li><code>@RequestMapping</code></li><li><code>@Controller</code></li><li><code>@RestController</code></li><li><code>@PatVariable</code> 获取路径参数</li><li><code>@RequestParam</code> 获取请求参数</li></ul></blockquote><h4 id="使用freemarker"><a href="#使用freemarker" class="headerlink" title="使用freemarker"></a>使用<code>freemarker</code></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加freemarker依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加使得SpringBoot支持热部署 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="为STS安装Freemarker插件"><a href="#为STS安装Freemarker插件" class="headerlink" title="为STS安装Freemarker插件"></a>为STS安装<code>Freemarker</code>插件</h4><p>安装方法：<code>Help--&gt;Install New Software--&gt;Add--&gt;Name=freemarker,Location=http://download.jboss.org/jbosstools/updates/development/</code>，然后选择<code>FreeMarker IDE</code>即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;参考资源&quot;&gt;&lt;a href=&quot;#参考资源&quot; class=&quot;headerlink&quot; title=&quot;参考资源&quot;&gt;&lt;/a&gt;参考资源&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-boot&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring Boot&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;使用的开发工具和平台&quot;&gt;&lt;a href=&quot;#使用的开发工具和平台&quot; class=&quot;headerlink&quot; title=&quot;使用的开发工具和平台&quot;&gt;&lt;/a&gt;使用的开发工具和平台&lt;/h3&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Windows 10 64位家庭版&lt;/li&gt;
&lt;li&gt;Spring Tool Suite  Version: 3.9.2.RELEASE&lt;/li&gt;
&lt;li&gt;java version 1.8.0_151&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="spring" scheme="https://liuqi12921.github.io/tags/spring/"/>
    
      <category term="spring boot" scheme="https://liuqi12921.github.io/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>使用Vagrant管理虚拟机</title>
    <link href="https://liuqi12921.github.io/2018/07/31/%E4%BD%BF%E7%94%A8Vagrant%E7%AE%A1%E7%90%86%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    <id>https://liuqi12921.github.io/2018/07/31/使用Vagrant管理虚拟机/</id>
    <published>2018-07-31T09:09:49.000Z</published>
    <updated>2018-08-02T08:21:26.495Z</updated>
    
    <content type="html"><![CDATA[<h3 id="软件版本和参考资源"><a href="#软件版本和参考资源" class="headerlink" title="软件版本和参考资源"></a>软件版本和参考资源</h3><p>初次接触<code>Vagrant</code>，了解有限，但还是能感受到它带来的好处。最大的益处在于使得配置软件开发环境异常简单，再也不用担心把系统搞乱了。</p><p>这里主要参考<a href="https://laravel.com/docs/5.6/homestead" target="_blank" rel="noopener">Laravel框架Homestead的安装和设置</a>，宿主机是<code>Windows 10家庭版</code>，虚拟机使用<a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="noopener">VirtualBox-5.2.16-123759-Win.exe</a>，Vagrant使用<a href="https://www.vagrantup.com/downloads.html" target="_blank" rel="noopener">vagrant_2.1.2_x86_64.msi</a>。</p><a id="more"></a><h3 id="安装-Homestead-Vagrant-Box"><a href="#安装-Homestead-Vagrant-Box" class="headerlink" title="安装 Homestead Vagrant Box"></a>安装 Homestead Vagrant Box</h3><p>使用<code>vagrant box add laravel/homestead</code>命令添加<code>laravel/homestead</code>到<code>Vagrant</code>。<code>Vagrant Box</code>默认的保存路径为<code>C:\Users\userName\.vagrant.d\</code>，可以通过设置环境变量更改此位置。在<code>Windows</code>下为<code>setx VAGRANT_HOME &quot;E:\your\path&quot;</code>。这里的<code>Vagrant Box</code>就是虚拟机映像文件。</p><h3 id="安装Homestead"><a href="#安装Homestead" class="headerlink" title="安装Homestead"></a>安装Homestead</h3><p>通过<code>git clone https://github.com/laravel/homestead.git ~/Homestead</code>下载到指定目录，我本机的目录为<code>E:\Homestead</code>，完成后通过<code>init.bat</code>生成配置文件<code>Homestead.yaml</code>。</p><h3 id="配置Homestead虚拟机"><a href="#配置Homestead虚拟机" class="headerlink" title="配置Homestead虚拟机"></a>配置Homestead虚拟机</h3><h4 id="配置文件夹同步"><a href="#配置文件夹同步" class="headerlink" title="配置文件夹同步"></a>配置文件夹同步</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">folders:</span></span><br><span class="line"><span class="attr">    - map:</span> <span class="attr">E:/web/homestead/code</span></span><br><span class="line"><span class="attr">      to:</span> <span class="string">/home/vagrant/code</span></span><br></pre></td></tr></table></figure><h4 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sites:</span></span><br><span class="line"><span class="attr">    - map:</span> <span class="string">homestead.test</span></span><br><span class="line"><span class="attr">      to:</span> <span class="string">/home/vagrant/code/laravel/public</span></span><br><span class="line"><span class="attr">    - map:</span> <span class="string">liuqi.learn</span></span><br><span class="line"><span class="attr">      to:</span> <span class="string">/home/vagrant/code/apache/public</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">"apache"</span></span><br></pre></td></tr></table></figure><p>这里配置了两个站点，一个为<code>Laravel</code>站点，默认使用<code>Nginx</code>，另一个为普通站点，使用<code>Apache</code>。</p><p>修改配置后可以使用<code>vagrant reload --provision</code>更新配置。</p><h4 id="添加Host配置"><a href="#添加Host配置" class="headerlink" title="添加Host配置"></a>添加Host配置</h4><p><code>hosts</code>文件位置<code>C:\Windows\System32\drivers\etc\hosts</code>，设置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Laravel Homestead</span></span><br><span class="line">192.168.10.10  homestead.test</span><br><span class="line">192.168.10.10  me.learn</span><br></pre></td></tr></table></figure><p>添加完成后即可通过<code>http://homestead.test</code>访问站点。</p><h3 id="运行Vagrant-Box"><a href="#运行Vagrant-Box" class="headerlink" title="运行Vagrant Box"></a>运行Vagrant Box</h3><p>在<code>E:\Homestead</code>目录下执行<code>vagrant up</code>即可启动虚拟机。销毁虚拟机的命令为<code>vagrant destroy --force</code>，此命令不会删除<code>Vagrant Box</code>。</p><h3 id="Vagrant-常用命令"><a href="#Vagrant-常用命令" class="headerlink" title="Vagrant 常用命令"></a>Vagrant 常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vagrant init      <span class="comment"># 初始化</span></span><br><span class="line"></span><br><span class="line">vagrant up        <span class="comment"># 启动虚拟机</span></span><br><span class="line">vagrant halt      <span class="comment"># 关闭虚拟机</span></span><br><span class="line">vagrant reload    <span class="comment"># 重启虚拟机</span></span><br><span class="line">vagrant ssh       <span class="comment"># SSH 至虚拟机</span></span><br><span class="line">vagrant <span class="built_in">suspend</span>   <span class="comment"># 挂起虚拟机</span></span><br><span class="line">vagrant resume    <span class="comment"># 唤醒虚拟机</span></span><br><span class="line">vagrant status    <span class="comment"># 查看虚拟机运行状态</span></span><br><span class="line">vagrant destroy   <span class="comment"># 销毁当前虚拟机</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#box管理命令</span></span><br><span class="line">vagrant box list    <span class="comment"># 查看本地box列表</span></span><br><span class="line">vagrant box add     <span class="comment"># 添加box到列表</span></span><br><span class="line"></span><br><span class="line">vagrant box remove  <span class="comment"># 从box列表移除</span></span><br></pre></td></tr></table></figure><h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在Window命令行打开代理的方法</span></span><br><span class="line"><span class="built_in">set</span> http_proxy=http://proxy.domain.com:port</span><br><span class="line"><span class="comment"># 如果有用户名和密码的话</span></span><br><span class="line"><span class="built_in">set</span> http_proxy_user=</span><br><span class="line"><span class="built_in">set</span> http_proxy_pass=</span><br></pre></td></tr></table></figure><p>在设置了<code>hosts</code>文件的情况下，如果浏览器使用了代理模式上网，则不能正常访问本地网站，关闭浏览器代理即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;软件版本和参考资源&quot;&gt;&lt;a href=&quot;#软件版本和参考资源&quot; class=&quot;headerlink&quot; title=&quot;软件版本和参考资源&quot;&gt;&lt;/a&gt;软件版本和参考资源&lt;/h3&gt;&lt;p&gt;初次接触&lt;code&gt;Vagrant&lt;/code&gt;，了解有限，但还是能感受到它带来的好处。最大的益处在于使得配置软件开发环境异常简单，再也不用担心把系统搞乱了。&lt;/p&gt;
&lt;p&gt;这里主要参考&lt;a href=&quot;https://laravel.com/docs/5.6/homestead&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Laravel框架Homestead的安装和设置&lt;/a&gt;，宿主机是&lt;code&gt;Windows 10家庭版&lt;/code&gt;，虚拟机使用&lt;a href=&quot;https://www.virtualbox.org/wiki/Downloads&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;VirtualBox-5.2.16-123759-Win.exe&lt;/a&gt;，Vagrant使用&lt;a href=&quot;https://www.vagrantup.com/downloads.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vagrant_2.1.2_x86_64.msi&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Laravel" scheme="https://liuqi12921.github.io/tags/Laravel/"/>
    
      <category term="Vagrant" scheme="https://liuqi12921.github.io/tags/Vagrant/"/>
    
      <category term="虚拟机" scheme="https://liuqi12921.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Python3速学-01</title>
    <link href="https://liuqi12921.github.io/2018/07/30/Python3%E9%80%9F%E5%AD%A6-01/"/>
    <id>https://liuqi12921.github.io/2018/07/30/Python3速学-01/</id>
    <published>2018-07-30T08:59:08.000Z</published>
    <updated>2018-08-02T08:20:09.852Z</updated>
    
    <content type="html"><![CDATA[<h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><ol><li><a href="http://naotu.baidu.com/file/f95be94ed543b73f0486dc36d4484381?token=437372303afcf8ec" target="_blank" rel="noopener">百度脑图Python3</a></li><li><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="noopener">Markdown语法参考</a></li></ol><h3 id="速学语法"><a href="#速学语法" class="headerlink" title="速学语法"></a>速学语法</h3><a id="more"></a><h4 id="打开Python交互式编程环境"><a href="#打开Python交互式编程环境" class="headerlink" title="打开Python交互式编程环境"></a>打开Python交互式编程环境</h4><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p><code>Python</code>中的注释以<code>#</code>开头，需要注意字符串字面值中的<code>#</code>并没有注释功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是一行注释</span></span><br><span class="line">name = <span class="string">"Hitomi"</span> <span class="comment"># 注释也可以放在变量定义的后面</span></span><br><span class="line">text = <span class="string">"# This is not a comment because it's inside quotes."</span></span><br></pre></td></tr></table></figure><h4 id="基本算数运算（Python作为计算器使用）"><a href="#基本算数运算（Python作为计算器使用）" class="headerlink" title="基本算数运算（Python作为计算器使用）"></a>基本算数运算（Python作为计算器使用）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> + <span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">50</span> - <span class="number">5</span>*<span class="number">6</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">50</span> - <span class="number">5</span>*<span class="number">6</span>) / <span class="number">4</span></span><br><span class="line"><span class="number">5.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">8</span> / <span class="number">5</span>    <span class="comment"># 除法总是返回浮点类型</span></span><br><span class="line"><span class="number">1.6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">17</span> // <span class="number">3</span>  <span class="comment"># 返回结果的整数部分</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">17</span> % <span class="number">3</span>   <span class="comment"># 求余数</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以上涉及了Python中的两种数据类型 int(整型) 和 float(浮点型)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span> ** <span class="number">2</span>  <span class="comment"># 求平方</span></span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> ** <span class="number">7</span>  <span class="comment"># 求7次方</span></span><br><span class="line"><span class="number">128</span></span><br></pre></td></tr></table></figure><h4 id="如何设置变量"><a href="#如何设置变量" class="headerlink" title="如何设置变量"></a>如何设置变量</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>width = <span class="number">20</span>       <span class="comment"># 设置了变量width 并设置初始值为20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>height = <span class="number">5</span> * <span class="number">9</span>   <span class="comment"># 设置了变量height 并设置初始值为 5 * 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># = 为赋值运算符，意义为将等号右边的值赋值给等号左边的变量</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>width = width + <span class="number">2</span> <span class="comment"># 此语句表示将width中的值加2后再赋值给width，显然等号的含义不同于数学上的定义</span></span><br></pre></td></tr></table></figure><h4 id="使用字符串"><a href="#使用字符串" class="headerlink" title="使用字符串"></a>使用字符串</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字符串可以使用单引号，也可以使用双引号，python使用unicode编码，支持亚洲字符</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'My name is Hitomi and I like python very much'</span>  <span class="comment"># 使用单引号</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"勉強すればするほど難しくなる思います"</span>              <span class="comment"># 使用双引号</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"China"</span>)                                   <span class="comment"># 使用内置函数print打印字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name = <span class="string">"Hitomi"</span>                                  <span class="comment"># 将字符串付给变量</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name[<span class="number">0</span>]                                          <span class="comment"># 取第位置0的字符，返回'H'</span></span><br><span class="line"><span class="comment"># 位置与字符的对应关系</span></span><br><span class="line"> +---+---+---+---+---+---+</span><br><span class="line"> | H | i | t | o | m | i |</span><br><span class="line"> +---+---+---+---+---+---+</span><br><span class="line"> <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span>   <span class="number">5</span>   <span class="number">6</span></span><br><span class="line"><span class="number">-6</span>  <span class="number">-5</span>  <span class="number">-4</span>  <span class="number">-3</span>  <span class="number">-2</span>  <span class="number">-1</span></span><br></pre></td></tr></table></figure><h4 id="Python中类定义"><a href="#Python中类定义" class="headerlink" title="Python中类定义"></a>Python中类定义</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line"></span><br><span class="line">    age = <span class="number">19</span> <span class="comment"># class variable shared by all instances</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, inputName)</span>:</span> <span class="comment"># 类似于Java的构造函数</span></span><br><span class="line">        self.name = inputName      <span class="comment"># instance variable unique to each instance</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.name)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod # 静态方法的定义</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">version</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"1.0"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;相关链接&quot;&gt;&lt;a href=&quot;#相关链接&quot; class=&quot;headerlink&quot; title=&quot;相关链接&quot;&gt;&lt;/a&gt;相关链接&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://naotu.baidu.com/file/f95be94ed543b73f0486dc36d4484381?token=437372303afcf8ec&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;百度脑图Python3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zybuluo.com/mdeditor&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Markdown语法参考&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;速学语法&quot;&gt;&lt;a href=&quot;#速学语法&quot; class=&quot;headerlink&quot; title=&quot;速学语法&quot;&gt;&lt;/a&gt;速学语法&lt;/h3&gt;
    
    </summary>
    
      <category term="learn" scheme="https://liuqi12921.github.io/categories/learn/"/>
    
      <category term="python3" scheme="https://liuqi12921.github.io/categories/learn/python3/"/>
    
    
      <category term="python3" scheme="https://liuqi12921.github.io/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>PHP with MySQL Essential Training 01</title>
    <link href="https://liuqi12921.github.io/2018/07/29/PHP-with-MySQL-Essential-Training-01/"/>
    <id>https://liuqi12921.github.io/2018/07/29/PHP-with-MySQL-Essential-Training-01/</id>
    <published>2018-07-29T02:20:08.000Z</published>
    <updated>2018-08-02T08:19:50.194Z</updated>
    
    <content type="html"><![CDATA[<h3 id="How-to-use-the-exercise-files"><a href="#How-to-use-the-exercise-files" class="headerlink" title="How to use the exercise files"></a>How to use the exercise files</h3><a id="more"></a><blockquote><ul><li>Copy Files <code>alt + drag</code> in <code>Windows</code> and <code>opt + drag</code> in <code>Mac</code></li><li>Use Terminal to import SQL to MySQL <code>mysql -u root -p database_name &lt; /sql/file/path/globe_bank.sql</code></li></ul></blockquote><h3 id="Solve-php-error"><a href="#Solve-php-error" class="headerlink" title="Solve php error"></a>Solve php error</h3><p>When I use <code>&lt;?php echo date(&#39;Y&#39;); ?&gt;</code> in my <code>index.php</code> file I get this error:</p><p><code>It is not safe to rely on the system’s timezone settings</code></p><p>and I can fix it by modifying <code>php.ini</code> and set <code>date.timezone = PRC</code></p><h3 id="Use-curl-to-test-http-response"><a href="#Use-curl-to-test-http-response" class="headerlink" title="Use curl to test http response"></a>Use curl to test http response</h3><p><code>curl --head http://localhost/globe_bank/public/staff/subjects/new.php?test=404</code></p><h3 id="Modify-the-header-information"><a href="#Modify-the-header-information" class="headerlink" title="Modify the header information"></a>Modify the header information</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error_404</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    header($_SERVER[<span class="string">"SERVER_PROTOCOL"</span>] . <span class="string">" 404 Not Found"</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error_500</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    header($_SERVER[<span class="string">"SERVER_PROTOCOL"</span>] . <span class="string">" 500 Internal Server Error"</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;How-to-use-the-exercise-files&quot;&gt;&lt;a href=&quot;#How-to-use-the-exercise-files&quot; class=&quot;headerlink&quot; title=&quot;How to use the exercise files&quot;&gt;&lt;/a&gt;How to use the exercise files&lt;/h3&gt;
    
    </summary>
    
      <category term="learn" scheme="https://liuqi12921.github.io/categories/learn/"/>
    
      <category term="php" scheme="https://liuqi12921.github.io/categories/learn/php/"/>
    
    
      <category term="lynda" scheme="https://liuqi12921.github.io/tags/lynda/"/>
    
      <category term="php" scheme="https://liuqi12921.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Vim Usage</title>
    <link href="https://liuqi12921.github.io/2018/07/28/Vim-Usage/"/>
    <id>https://liuqi12921.github.io/2018/07/28/Vim-Usage/</id>
    <published>2018-07-28T02:10:18.000Z</published>
    <updated>2018-08-02T08:20:57.874Z</updated>
    
    <content type="html"><![CDATA[<h3 id="如何在vim的帮助文档里跳转？"><a href="#如何在vim的帮助文档里跳转？" class="headerlink" title="如何在vim的帮助文档里跳转？"></a>如何在vim的帮助文档里跳转？</h3><a id="more"></a><p><code>Ctrl + ]</code>可以进入<code>Tag</code>，<code>Ctrl + T</code>可以回到之前的位置，类似于浏览器里的前进和后退</p><h3 id="如何安装vim插件？"><a href="#如何安装vim插件？" class="headerlink" title="如何安装vim插件？"></a>如何安装vim插件？</h3><p>使用<a href="https://github.com/tpope/vim-pathogen" target="_blank" rel="noopener">pathogen.vim</a>，安装<a href="https://vimawesome.com/plugin/nerdtree-red" target="_blank" rel="noopener">NerdTree</a></p><h3 id="如何使用vim的分屏功能？"><a href="#如何使用vim的分屏功能？" class="headerlink" title="如何使用vim的分屏功能？"></a>如何使用vim的分屏功能？</h3><p><a href="https://www.cnblogs.com/manziluo/p/5789700.html" target="_blank" rel="noopener">vim分屏功能总结</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建空白分屏 :new</span></span><br><span class="line"><span class="comment"># 打开任意文件 :vsplit(:vsp) filename 或 :split(:sp) filename</span></span><br><span class="line"><span class="comment"># 打开当前文件 ctrl + w s/v</span></span><br><span class="line"><span class="comment"># 关闭一个分屏 :only 或 ctrl + w o</span></span><br><span class="line"><span class="comment"># 切换分屏 ctrl + w w</span></span><br></pre></td></tr></table></figure><h3 id="Getting-Started-with-Vim-An-Interactive-Guide"><a href="#Getting-Started-with-Vim-An-Interactive-Guide" class="headerlink" title="Getting Started with Vim: An Interactive Guide"></a><a href="https://scotch.io/tutorials/getting-started-with-vim-an-interactive-guide#super-basic-starter" target="_blank" rel="noopener">Getting Started with Vim: An Interactive Guide</a></h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;如何在vim的帮助文档里跳转？&quot;&gt;&lt;a href=&quot;#如何在vim的帮助文档里跳转？&quot; class=&quot;headerlink&quot; title=&quot;如何在vim的帮助文档里跳转？&quot;&gt;&lt;/a&gt;如何在vim的帮助文档里跳转？&lt;/h3&gt;
    
    </summary>
    
      <category term="tools" scheme="https://liuqi12921.github.io/categories/tools/"/>
    
      <category term="vim" scheme="https://liuqi12921.github.io/categories/tools/vim/"/>
    
    
      <category term="vim" scheme="https://liuqi12921.github.io/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>使用SpringMVC进行图片上传</title>
    <link href="https://liuqi12921.github.io/2018/07/27/%E4%BD%BF%E7%94%A8SpringMVC%E8%BF%9B%E8%A1%8C%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/"/>
    <id>https://liuqi12921.github.io/2018/07/27/使用SpringMVC进行图片上传/</id>
    <published>2018-07-27T11:44:03.000Z</published>
    <updated>2018-08-02T08:13:02.064Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(Blogger blogger, MultipartFile imageFile,  HttpServletResponse response, HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!imageFile.isEmpty()) &#123;</span><br><span class="line">String filePath = request.getSession().getServletContext().getRealPath(<span class="string">"/"</span>);</span><br><span class="line">String imageName = DateUtil.getCurrentDateStr() + <span class="string">"."</span> + imageFile.getOriginalFilename().split(<span class="string">"\\."</span>)[<span class="number">1</span>];</span><br><span class="line">imageFile.transferTo(<span class="keyword">new</span> File(filePath + <span class="string">"static/userImages/"</span> + imageName)); <span class="comment">// 保存文件到相应目录</span></span><br><span class="line">blogger.setImageName(imageName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> resultTotal = bloggerService.update(blogger);</span><br><span class="line">StringBuffer result = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"><span class="keyword">if</span> (resultTotal &gt; <span class="number">0</span>) &#123;</span><br><span class="line">result.append(<span class="string">"&lt;script language='javascript'&gt;alert('修改成功!')&lt;/script&gt;"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">result.append(<span class="string">"&lt;script language='javascript'&gt;alert('修改失败!')&lt;/script&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">ResponseUtil.write(response, result);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用<code>Spring MVC</code>进行图片的上传使用的是<code>MultipartFile</code>这个类</p><p>对应的前端代码如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"imageFile"</span> <span class="attr">name</span>=<span class="string">"imageFile"</span>/&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/spa
      
    
    </summary>
    
      <category term="代码片段" scheme="https://liuqi12921.github.io/categories/%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
    
    
      <category term="spring mvc" scheme="https://liuqi12921.github.io/tags/spring-mvc/"/>
    
  </entry>
  
  <entry>
    <title>Install Python3 on Windows 10</title>
    <link href="https://liuqi12921.github.io/2018/07/25/Install-Python3-on-Windows-10/"/>
    <id>https://liuqi12921.github.io/2018/07/25/Install-Python3-on-Windows-10/</id>
    <published>2018-07-25T01:45:33.000Z</published>
    <updated>2018-08-02T08:19:21.727Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python3的安装与下载"><a href="#Python3的安装与下载" class="headerlink" title="Python3的安装与下载"></a>Python3的安装与下载</h3><a id="more"></a><ol><li><p><a href="https://www.python.org/downloads/release/python-362/" target="_blank" rel="noopener">官网下载Python3</a></p></li><li><p>我这里选择Windows64位版  <img src="/2018/07/25/Install-Python3-on-Windows-10/download_python.png" alt=""></p></li><li><p>下载完成后得到如下安装文件 <img src="/2018/07/25/Install-Python3-on-Windows-10/python362.png" alt=""></p></li><li><p>双击进行安装</p><blockquote><ul><li><img src="/2018/07/25/Install-Python3-on-Windows-10/python_install_1.png" alt=""></li><li><img src="/2018/07/25/Install-Python3-on-Windows-10/python_install_2.png" alt=""></li><li><img src="/2018/07/25/Install-Python3-on-Windows-10/python_install_3.png" alt=""></li><li><img src="/2018/07/25/Install-Python3-on-Windows-10/python_install_4.png" alt=""></li><li><img src="/2018/07/25/Install-Python3-on-Windows-10/python_install_5.png" alt=""></li></ul></blockquote></li><li><p>验证<code>Python</code>是否正确安装</p><blockquote><ul><li>按<code>Windows + x</code>在出现的选项中选择 <code>Windows PowerShell</code></li><li>键入<code>python -V</code>查看<code>python</code>的版本信息 <img src="/2018/07/25/Install-Python3-on-Windows-10/check_python_version.png" alt=""></li><li>键入<code>pip freeze</code>查看<code>python</code>包管理器是否安装成功 <img src="/2018/07/25/Install-Python3-on-Windows-10/check_pip.png" alt=""></li></ul></blockquote></li><li><p>修改<code>Windows PowerShell</code>解除脚本运行限制</p><blockquote><ul><li>按<code>Windows + x</code>在出现的选项中选择 <code>Windows PowerShell(管理员)</code></li><li>输入<code>Set-ExecutionPolicy Unrestricted</code>并输入<code>yes</code>确认</li></ul></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Python3的安装与下载&quot;&gt;&lt;a href=&quot;#Python3的安装与下载&quot; class=&quot;headerlink&quot; title=&quot;Python3的安装与下载&quot;&gt;&lt;/a&gt;Python3的安装与下载&lt;/h3&gt;
    
    </summary>
    
      <category term="learn" scheme="https://liuqi12921.github.io/categories/learn/"/>
    
      <category term="python" scheme="https://liuqi12921.github.io/categories/learn/python/"/>
    
    
      <category term="python" scheme="https://liuqi12921.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>对Java代理模式的理解</title>
    <link href="https://liuqi12921.github.io/2017/10/02/%E5%AF%B9Java%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>https://liuqi12921.github.io/2017/10/02/对Java代理模式的理解/</id>
    <published>2017-10-02T12:36:47.000Z</published>
    <updated>2018-08-02T08:21:33.313Z</updated>
    
    <content type="html"><![CDATA[<h2 id="静态代理和动态代理"><a href="#静态代理和动态代理" class="headerlink" title="静态代理和动态代理"></a>静态代理和动态代理</h2><a id="more"></a><h3 id="静态代理模式的构成"><a href="#静态代理模式的构成" class="headerlink" title="静态代理模式的构成"></a>静态代理模式的构成</h3><blockquote><ul><li>一个共同的接口或抽象类</li><li>真实的类</li><li>代理类</li></ul></blockquote><p>其中<strong>真实类</strong>和<strong>代理类</strong>都实现了一个<strong>共同的接口</strong>，代理类内部有一个对真实类对象的引用，用户使用代理类时，实际会调用真实对象的对应方法。</p><h3 id="静态代理的局限"><a href="#静态代理的局限" class="headerlink" title="静态代理的局限"></a>静态代理的局限</h3><blockquote><ul><li>有一个真实类就要构造一个代理类，类的数量会急剧增加</li><li>在编写代码时若没有确定需要被代理的真实类，是不能编写代理类的。</li></ul></blockquote><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>用户需要使用<code>Java</code>提供的<code>Proxy</code>类动态创建一个代理类，并使用这个代理类实现相应功能。对于一个代理类来说，首先它需要知道它要代理的类是什么，<code>Proxy</code>类的<code>newProxyInstance()</code>方法中的参数好像并没有提供这样的信息，其实这个信息存在于它的第三个参数<code>InvocationHandler</code>里面。<code>InvocationHandler</code>负责实际的方法调用，在实现了<code>InvocationHandler</code>接口的类里一定有一个成员变量来存储真实类的实例，而对真实类方法的调用则是通过<code>invoke</code>方法里的<code>method</code>参数来实现的。形如这样的形式：</p><figure class="highlight java"><figcaption><span>InvocationHandler.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  System.out.println(<span class="string">"before calling: "</span> + method);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">null</span> != args) &#123;</span><br><span class="line">    <span class="keyword">for</span> (Object obj : args) &#123;</span><br><span class="line">      System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  Object object = method.invoke(proxyObj, args);</span><br><span class="line">  System.out.println(<span class="string">"after calling: "</span> + method);</span><br><span class="line">  <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>InvacationHandler</code>就是真实类和代理类之间的桥梁，代理类的对象在动态生成时只声称自己实现了某一组接口，这组接口应和真实类所实现的接口一致，这是由代理的性质所决定的。真实类被封装在了<code>handler</code>里，<code>handler</code>的<code>invoke</code>方法利用<code>Java</code>的反射机制就可以调用真实类的方法。动态代理具有很强的灵活性。首先，我们不再特意为某一个类创建代理类，代理类是动态生成的，同时对于只有在运行时才能确定真实类的场合，可以在运行时由<code>handler</code>来动态获取真实类解决。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;静态代理和动态代理&quot;&gt;&lt;a href=&quot;#静态代理和动态代理&quot; class=&quot;headerlink&quot; title=&quot;静态代理和动态代理&quot;&gt;&lt;/a&gt;静态代理和动态代理&lt;/h2&gt;
    
    </summary>
    
      <category term="编程语言" scheme="https://liuqi12921.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Java" scheme="https://liuqi12921.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/"/>
    
    
      <category term="设计模式" scheme="https://liuqi12921.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>编舟记观后感</title>
    <link href="https://liuqi12921.github.io/2017/01/29/%E7%BC%96%E8%88%9F%E8%AE%B0%E8%A7%82%E5%90%8E%E6%84%9F/"/>
    <id>https://liuqi12921.github.io/2017/01/29/编舟记观后感/</id>
    <published>2017-01-29T05:57:21.000Z</published>
    <updated>2018-08-02T08:13:18.615Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>很喜欢这种类型的电影。叙事采用白描的手法，看似平铺直叙，但场景的切换和节奏的把握都很好，清楚地传达了作品的主题。看这样的作品就像在品清茶，入口时淡淡的，似乎没有什么滋味，但随着剧情的进展就会发现作品的主题和传达的情感会越来越浓。这种缓慢而含蓄的通过整个作品来表达主题的手法在日本电影中是很常见的。前几年的奥斯卡最佳外语片<strong>「送り人」</strong>也让我有这样的感受。</p><p>这类电影需要静下心来细细品味。和注重视觉效果和离奇剧情的商业片不同，这种从普通人视角出发来探究人生意义和生活哲学的作品往往更能引起共鸣。因为从这类作品中，我们或多或少看到了我们自己。</p><p>电影的开头和结尾都使用了大海这个意象，这贴合了电影的主题，同时从那深邃的大海影像中我联想到了一个词，<strong>静水流深</strong>。看似平静的外表下却蕴藏着巨大的能量，看似寻常的事物背后却有着很多人的努力和心血。</p><p><strong>大渡海</strong>是主人公所编纂的辞书名称，这个名称寓意着这本书就像词汇之海中的一叶扁舟，引领着读者探索语言世界的奥秘。主人公用了十五年的时间最终编成了这部辞书。这期间经历了前辈的退休，同事的调离，和喜欢的人结婚，成为辞书编纂的负责人等等，虽然周遭的人和事都在变化，但初心未变。</p><p>编纂辞书这类工作，在外人看来，枯燥乏味，做这类工作的人也被世俗认为是怪人，因为他们通常看起来木讷，不善交际，与周遭的世界格格不入。正如主人公所说，我不知道他们在想什么，他们也不懂我的想法，道出了自己的苦恼。但<strong>推动社会进步与发展的不正是这样的怪人和偏执狂吗？</strong>他们就是深邃大海里的暗流，默默地引导社会前进的方向。</p><p>这部电影所传达的就是一种匠人文化，在看似重复枯燥的工作中体味人生的真谛与价值。这世界变化太快，人的心就像断了线的风筝，不知该去向何方。如果我们放弃了手中的线，那么这样的人生肯定是空虚而没有存在感的。电影的最后，在老编辑的信中提到了自己由于编写<strong>大渡海</strong>而感到无比充实。人在临终时有这样的感悟也算是幸福的吧。工匠文化是一种信仰，一种精神上的追求。快乐的获得来自于技艺的不断精进，来自于常年累月的努力所获得的对世界的理解，这是一种不依赖于外界环境的快乐，不然很难想象有人会坚持让自己感到痛苦的工作。</p><p>李笑来老师在他的《和时间做朋友》里谈到<strong>兴趣是最好的老师</strong>这句话是有问题的，<strong>其实不是有兴趣才去做，而是因为做了，而且做得比大多数人好才会有兴趣</strong>。所以也许可以得出这样的结论，对于大多数的工作，我们只要付出耐心与努力都可以做到相当好的程度，只不过这个社会太浮躁，大部分人都无法坚持下去吧。</p><p>以上是我观影后的一点感想。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;很喜欢这种类型的电影。叙事采用白描的手法，看似平铺直叙，但场景的切换和节奏的把握都很好，清楚地传达了作品的主题。看这样的作品就像在品清茶，入口时淡淡的，似乎没有什么滋味，但随着剧情的进展就会发现作品的主题和传达的情感会越来越浓。这种缓慢而
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://liuqi12921.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
