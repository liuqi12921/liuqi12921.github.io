<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hitomi</title>
  
  <subtitle>hitomi&#39;s tech blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liuqi12921.github.io/"/>
  <updated>2018-07-23T14:09:45.398Z</updated>
  <id>https://liuqi12921.github.io/</id>
  
  <author>
    <name>Hitomi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>对Java代理模式的理解</title>
    <link href="https://liuqi12921.github.io/2017/10/02/%E5%AF%B9Java%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>https://liuqi12921.github.io/2017/10/02/对Java代理模式的理解/</id>
    <published>2017-10-02T12:36:47.000Z</published>
    <updated>2018-07-23T14:09:45.398Z</updated>
    
    <content type="html"><![CDATA[<h2 id="静态代理和动态代理"><a href="#静态代理和动态代理" class="headerlink" title="静态代理和动态代理"></a>静态代理和动态代理</h2><h3 id="静态代理模式的构成"><a href="#静态代理模式的构成" class="headerlink" title="静态代理模式的构成"></a>静态代理模式的构成</h3><blockquote><ul><li>一个共同的接口或抽象类</li><li>真实的类</li><li>代理类</li></ul></blockquote><p>其中<strong>真实类</strong>和<strong>代理类</strong>都实现了一个<strong>共同的接口</strong>，代理类内部有一个对真实类对象的引用，用户使用代理类时，实际会调用真实对象的对应方法。</p><h3 id="静态代理的局限"><a href="#静态代理的局限" class="headerlink" title="静态代理的局限"></a>静态代理的局限</h3><blockquote><ul><li>有一个真实类就要构造一个代理类，类的数量会急剧增加</li><li>在编写代码时若没有确定需要被代理的真实类，是不能编写代理类的。</li></ul></blockquote><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>用户需要使用<code>Java</code>提供的<code>Proxy</code>类动态创建一个代理类，并使用这个代理类实现相应功能。对于一个代理类来说，首先它需要知道它要代理的类是什么，<code>Proxy</code>类的<code>newProxyInstance()</code>方法中的参数好像并没有提供这样的信息，其实这个信息存在于它的第三个参数<code>InvocationHandler</code>里面。<code>InvocationHandler</code>负责实际的方法调用，在实现了<code>InvocationHandler</code>接口的类里一定有一个成员变量来存储真实类的实例，而对真实类方法的调用则是通过<code>invoke</code>方法里的<code>method</code>参数来实现的。形如这样的形式：</p><figure class="highlight java"><figcaption><span>InvocationHandler.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  System.out.println(<span class="string">"before calling: "</span> + method);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">null</span> != args) &#123;</span><br><span class="line">    <span class="keyword">for</span> (Object obj : args) &#123;</span><br><span class="line">      System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  Object object = method.invoke(proxyObj, args);</span><br><span class="line">  System.out.println(<span class="string">"after calling: "</span> + method);</span><br><span class="line">  <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>InvacationHandler</code>就是真实类和代理类之间的桥梁，代理类的对象在动态生成时只声称自己实现了某一组接口，这组接口应和真实类所实现的接口一致，这是由代理的性质所决定的。真实类被封装在了<code>handler</code>里，<code>handler</code>的<code>invoke</code>方法利用<code>Java</code>的反射机制就可以调用真实类的方法。动态代理具有很强的灵活性。首先，我们不再特意为某一个类创建代理类，代理类是动态生成的，同时对于只有在运行时才能确定真实类的场合，可以在运行时由<code>handler</code>来动态获取真实类解决。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;静态代理和动态代理&quot;&gt;&lt;a href=&quot;#静态代理和动态代理&quot; class=&quot;headerlink&quot; title=&quot;静态代理和动态代理&quot;&gt;&lt;/a&gt;静态代理和动态代理&lt;/h2&gt;&lt;h3 id=&quot;静态代理模式的构成&quot;&gt;&lt;a href=&quot;#静态代理模式的构成&quot; class
      
    
    </summary>
    
      <category term="java" scheme="https://liuqi12921.github.io/categories/java/"/>
    
      <category term="编程语言" scheme="https://liuqi12921.github.io/categories/java/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="设计模式" scheme="https://liuqi12921.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
